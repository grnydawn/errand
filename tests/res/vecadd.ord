
[signature: a, b -> c @ key="test"]

    // may define specific types of arguments
    // may define global variables
    // data type is defined at runtime if not specified
    // and signature is constructed and compile at runtime
    // follow numpy conventions
    // support debugging with input / output verification like stubs

[cuda: -O3 @ compiler="nvcc"]

    printf("\n**** 1");
    int id = blockDim.x * blockIdx.x + threadIdx.x;
    printf("\n**** 2");
	//printf("\n  ## %d, %d, %f", id, a.size, a.data[0]);
	//printf("\n  ## %d, %d", id, a.size);
	//a.size = 10;
    if(id < 3) {
		//printf("\n  ## %f", a.data[id]);
		//printf("\n  ## %p, %f", a, a[id]);
		c[id] = a[id] + b[id];
		printf("\nVal at %d = %f", id, c[id]);
	}
    printf("\n**** 3");

[hip]

    // int id = hipThreadIdx_x;
    // if(id < N) c->data[id] = a->data[id] + b->data[id];
    int id = blockDim.x * blockIdx.x + threadIdx.x;
    if(id < a->size) c->data[id] = a->data[id] + b->data[id];

